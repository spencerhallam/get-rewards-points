{"version":3,"sources":["helpers/Helpers.js","components/ListMonths.js","components/GrandTotal.js","components/MonthlyTotals.js","components/RewardsByTrans.js","components/History.js","components/Assignment.js","App.js","serviceWorker.js","index.js"],"names":["calcPoints","data","i","subTotalArray","totOne","amt","monthCode","Date","date","getMonth","subpoints","customerId","id","name","customer","month","points","push","listCustomerIds","custForEachTrans","chooseMonths","arr","months","newArr","removeDupes","arrWithDupes","Set","ListMonths","props","listMonths","monthsFilter","map","idx","key","className","num","getMonthString","GrandTotal","filteredMos","history","listCustPtSums","arrA","arrB","superSum","pointTotA","nameA","transQty","j","custSum","total","qty","getCustSums","sum","MonthlyTotals","monthsA","k","getCustMoSums","getMoAbrString","RewardsByTrans","listRewards","reward","History","listHistory","transaction","Assignment","href","target","rel","App","state","monthsToFilter","transactions","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.072b9db5.chunk.js","sourcesContent":["export function calcPoints(data) {\n    let subTotalArray = [];\n    let i;\n    // Calculate reward points from transactions data\n    for(i in data){\n        let totOne = 0;\n        if(data[i].amt > 50 && data[i].amt < 100){\n            totOne += data[i].amt - 50\n        }\n        if(data[i].amt > 100){\n            totOne += 50 + (data[i].amt - 100)*2\n        }\n\n    // Create object containing customerId to calculated points for each transaction.\n    let dateObj = new Date(data[i].date);\n    let monthCode = dateObj.getMonth();\n    let subpoints = {customerId: data[i].id, name: data[i].customer,  date: data[i].date, month: monthCode, amt: data[i].amt, points: totOne };\n\n    // Push object with customerId and earned transaction points to array\n    subTotalArray.push(subpoints);\n   }\n   return subTotalArray\n}\n\nexport function listCustomerIds(data) {\n    let custForEachTrans = [];\n    let i;\n    for(i in data){\n        // Push customer ids into their own array\n        custForEachTrans.push(data[i].id);\n   }\n   return custForEachTrans\n}\n\n// Use array of month numbers to filter out unwanted data\nexport function chooseMonths(arr, months){\n\n    let newArr = [];\n    let i;\n    for(i in arr){\n       if( arr[i].month === months[0] || arr[i].month === months[1] || arr[i].month === months[2] ){\n           newArr.push(arr[i]);\n       }    \n    }\n\n    return newArr\n\n}\n// Uses unique customer ids to search through and total earned points for each customer filtered by months indicated\nexport function getCustSums(arrA, arrB){\n\n    let superSum = [];  \n    let i;\n    for(i in arrA){\n  \n      let pointTotA = 0;\n      let nameA = \"\";\n      let transQty = 0;\n      let j;\n\n      for(j in arrB){\n         \n          if(arrA[i] === arrB[j].customerId){\n         \n              pointTotA += arrB[j].points\n              nameA = arrB[j].name\n              transQty += 1\n  \n          }\n      }  \n  \n          // Create new object and push to \"superSum\" array\n          let custSum = {id: arrA[i], name: nameA, total: pointTotA, qty: transQty};\n          superSum.push(custSum);\n      }\n  \n    return superSum\n  \n  }\n  \n// Uses unique user and month filter array to total points for each customer/month\nexport function getCustMoSums(arrA, arrB, months){\n\n    let superSum = [];\n    let i;\n\n    for(i in arrB){\n        let j;\n        for(j in months){\n\n            let pointTotA = 0;\n            let nameA = \"see id\";\n            let monthsA = months[j];\n            let transQty = 0;\n            //let idA = 0;\n            let k   \n                for(k in arrA){\n                   \n                    if(arrA[k].customerId === arrB[i] && arrA[k].month === months[j] && arrA[k].customerId !== 0 ){\n\n                        monthsA = months[j]\n                        nameA = arrA[k].name\n                        //idA = arrA[k].customerId\n                        transQty += 1\n                        pointTotA += arrA[k].points\n                       \n                    }\n                }\n\n                // Create new object and push to \"superSum\" array\n                let custSum = {id: arrB[i], name: nameA, month: monthsA, total: pointTotA, qty: transQty};\n                if(custSum.id !== 0){\n                superSum.push(custSum);\n            }\n        }\n    }\n\n    return superSum\n\n}\n\n\n// Removes duplicates values from any array\nexport function removeDupes(arrWithDupes){\n    let uniq = [...new Set(arrWithDupes)];\n    // console.log(\"uniq\", uniq);\n    return uniq;\n}\n\n// Utility function: \nexport function getMonthString(num){\n    let month;\n    switch(num)\n    {\n      case 0:\n        month=\"January\";\n        break;\n      case 1:\n        month=\"February\";\n        break;\n      case 2:\n        month=\"March\";\n        break;\n      case 3:\n        month=\"April\";\n        break;\n      case 4:\n        month=\"May\";\n        break;\n      case 5:\n        month=\"June\";\n        break;\n      case 6:\n        month=\"July\";\n        break;\n      case 7:\n        month=\"August\";\n        break;\n      case 8:\n        month=\"September\";\n        break;\n      case 9:\n        month=\"October\";\n        break;\n      case 10:\n        month=\"November\";\n        break;\n      case 11:\n        month=\"December\";\n        break;\n      default:\n        month=\"Invalid month\";\n    }\n    return month;\n}     \n\n\n// Utility function: \nexport function getMoAbrString(num){\n    let month;\n    switch(num)\n    {\n      case 0:\n        month=\"Jan\";\n        break;\n      case 1:\n        month=\"Feb\";\n        break;\n      case 2:\n        month=\"Mar\";\n        break;\n      case 3:\n        month=\"Apr\";\n        break;\n      case 4:\n        month=\"May\";\n        break;\n      case 5:\n        month=\"Jun\";\n        break;\n      case 6:\n        month=\"Jul\";\n        break;\n      case 7:\n        month=\"Aug\";\n        break;\n      case 8:\n        month=\"Sep\";\n        break;\n      case 9:\n        month=\"Oct\";\n        break;\n      case 10:\n        month=\"Nov\";\n        break;\n      case 11:\n        month=\"Dec\";\n        break;\n      default:\n        month=\"Invalid month\";\n    }\n    return month;\n}   ","import React from 'react';\nimport { getMonthString } from '../helpers/Helpers.js'\n\nfunction ListMonths(props) {\n    const months = props.monthsFilter\n    const listMonths = months.map((month, idx) => {\n        return <span key={idx} className=\"show-months\">{getMonthString(month)}</span>\n      })\n  return (\n    <div className=\"range\">\n      Month Range: { listMonths }\n    </div>\n  );\n}\n\nexport default ListMonths;","import React from 'react';\nimport ListMonths from './ListMonths.js'\nimport { calcPoints, listCustomerIds, removeDupes, getCustSums, chooseMonths } from '../helpers/Helpers.js'\n\nfunction GrandTotal(props) {\n  const pointsForEach = calcPoints(props.history);\n  const filteredMos = chooseMonths(pointsForEach, props.monthsFilter)\n  const getIdsAll = listCustomerIds(props.history);\n  const uniqueIds = removeDupes(getIdsAll);\n  const threeMoSums = getCustSums(uniqueIds, filteredMos);\n  const listCustPtSums = threeMoSums.map( (sum, idx) => {\n      return(\n        <li className=\"transaction\" key={idx}>\n                <ul>\n                    <li className=\"customer-field\">Customer: <strong>{sum.name ? sum.name : \"see id\"}</strong> (ID# {sum.id})</li>\n                    <li>Rewards: {sum.total}pts</li>\n                    <li>Transactions Qty: {sum.qty}</li>\n                </ul>\n        </li>   \n      )\n  });\n  \n  return (\n    <div className=\"grand-total\">\n      <h2>Total Customer Point Accruals:</h2>\n      <ListMonths monthsFilter={props.monthsFilter}/>\n      <ul>\n          { listCustPtSums }\n      </ul>\n    </div>\n  );\n}\n\nexport default GrandTotal;","import React from 'react';\nimport ListMonths from './ListMonths.js'\nimport { calcPoints, listCustomerIds, removeDupes, getCustMoSums, chooseMonths, getMoAbrString } from '../helpers/Helpers.js'\n\nfunction MonthlyTotals(props) {\n  const pointsForEach = calcPoints(props.history);  \n  const filteredMos = chooseMonths(pointsForEach, props.monthsFilter)\n  const getIdsAll = listCustomerIds(props.history);\n  const uniqueIds = removeDupes(getIdsAll);\n  const threeMoSums = getCustMoSums(filteredMos, uniqueIds, props.monthsFilter);\n  const listCustPtSums = threeMoSums.map( (sum, idx) => {\n      return(\n        <li className=\"monthly-totals\" key={idx}>\n                <ul >\n                    <li className=\"customer-field\">Customer: <strong>{sum.name}</strong> (ID# {sum.id})</li>\n                    <li>Month: {getMoAbrString(sum.month)} 2019</li>\n                    <li>Rewards: {sum.total}pts</li>\n                    <li>Qty of Purchases: {sum.qty}</li>\n                </ul>\n        </li>   \n      )\n  });\n\n  return (\n    <div className=\"grand-total\">\n      <h2>Reward Accruals by Customer for Each Month in Range:</h2>\n      <ListMonths monthsFilter={props.monthsFilter}/>\n      <ul>\n          {listCustPtSums}\n      </ul>    \n    </div>\n  );\n}\n\nexport default MonthlyTotals;","import React from 'react';\nimport { calcPoints } from '../helpers/Helpers.js'\n\nfunction RewardsByTrans(props) {\n    const rewards = calcPoints(props.history)\n    const listRewards = rewards.map((reward, idx) => {\n        return(\n            <li className=\"transaction\" key={idx}>\n                <ul>\n                    <li>Date: {reward.date}</li>\n                    <li className=\"customer-field\">Customer: <strong>{reward.name}</strong> (ID# {reward.customerId})</li>\n                    <li>Amount: ${reward.amt}</li>\n                    <li>Rewards: <span className=\"highlight-01\">{reward.points}pts</span></li>\n                </ul>\n            </li>\n        )\n     });\n\n  return (\n    <div className=\"grand-total\">\n      <h3>Calculated Reward Points: </h3>\n      <div className=\"range\">\n        All 2019 Transaction Data\n      </div>\n      <ol>\n        { listRewards }\n      </ol>\n    </div>\n  );\n}\n\nexport default RewardsByTrans;\n","import React from 'react';\n\nfunction History(props) {\n    const transactions = props.history;\n    const listHistory = transactions.map((transaction, idx) => {\n        return(\n            <li className=\"transaction\" key={idx}>\n                <ul >\n                    <li>Date: {transaction.date}</li>\n                    <li className=\"customer-field\">Customer: <strong>{transaction.customer}</strong> (ID# {transaction.id})</li>\n                    <li>Amount: ${transaction.amt}</li>\n                </ul>\n            </li>\n        )\n     }\n    );\n\n  return (\n    <div className=\"trans-history\">\n      <h3>All Transactions:</h3>\n      <div className=\"range\">\n        All 2019 Data\n      </div>  \n      <ol>\n\n          { listHistory }\n            \n      </ol> \n      \n    </div>\n  );\n}\n\nexport default History;","\nimport React from 'react';\n\nfunction Assignment() {  \n  return (\n    <div id=\"header\">\n        <h3>ASSIGNMENT</h3>\n        <p>A retailer offers a rewards program to its customers, awarding points based on each recorded purchase.</p>\n        <p>Interview coding assignment below.</p>\n        <p>A customer receives 2 points for every dollar spent over $100 in each transaction, plus 1 point for every dollar spent over $50 in each transaction</p>\n        <p>(e.g. a $120 purchase = 2x$20 + 1x$50 = 90 points).</p>\n        <p>Given a record of every transaction during a three month period, calculate the reward points earned for each customer per month and total.</p>\n        <p>Make up a data set to best demonstrate your solution</p>\n        <p>Check solution into GitHub</p>\n    \n        <div id=\"solution\">\n            Solution by Spencer Hallam   (   <a href=\"https://github.com/spencerhallam\" target=\"_blank\" rel=\"noopener noreferrer\"><em>GitHub</em></a>   |   <a href=\"http://savvywebdev.com\" target=\"_blank\"><em>Projects Portfolio</em> )</a>\n        </div>\n    </div>    \n  );\n}\n\nexport default Assignment;\n\n","import React from 'react';\nimport GrandTotal from './components/GrandTotal.js'\nimport MonthlyTotals from './components/MonthlyTotals.js'\nimport RewardsByTrans from './components/RewardsByTrans.js'\nimport History from './components/History.js'\nimport Assignment from './components/Assignment.js'\nimport './App.css';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // 3 months to search use number \"0-11\"\n      monthsToFilter: [7,8,9], \n      // Data for customer transactions in 2019. \"amt\" = \"amount spent\" in each purchase\n      transactions : [\n        {\n          id: 10001,\n          customer: \"Luna\",\n          date: \"2019-4-21\",\n          amt: 330,  \n        },\n        {\n           id: 10001,\n           customer: \"Luna\",\n           date: \"2019-8-07\",\n           amt: 120,  \n        },\n        {\n          id: 10001,\n          customer: \"Luna\",\n          date: \"2019-9-02\",\n          amt: 232,  \n        },\n        {\n          id: 10001,\n          customer: \"Luna\",\n          date: \"2019-10-06\",\n          amt: 146,  \n        },\n        {\n          id: 10001,\n          customer: \"Luna\",\n          date: \"2019-9-24\",\n          amt: 60,  \n        },\n        {\n          id: 10002,\n          customer: \"Francis\",\n          date: \"2019-8-16\",\n          amt: 290,\n        },\n        {\n          id: 10002,\n          customer: \"Francis\",\n          date: \"2019-9-04\",\n          amt: 75,  \n        },\n        {\n          id: 10002,\n          customer: \"Francis\",\n          date: \"2019-10-28\",\n          amt: 40,  \n        },\n        {\n            id: 10003,\n            customer: \"Helen\",\n            date: \"2019-9-13\",\n            amt: 230,  \n        },\n        {\n            id: 10004,\n            customer: \"Moses\",\n            date: \"2019-10-13\",\n            amt: 290,  \n        },\n        {\n            id: 10003,\n            customer: \"Helen\",\n            date: \"2019-2-20\",\n            amt: 110,  \n        },\n        {\n            id: 10005,\n            customer: \"Nina\",\n            date: \"2019-8-20\",\n            amt: 165,  \n        },\n        {\n            id: 10002,\n            customer: \"Francis\",\n            date: \"2019-5-28\",\n            amt: 148,  \n        },\n        {\n            id: 10003,\n            customer: \"Helen\",\n            date: \"2019-7-13\",\n            amt: 30,  \n        },\n        {\n          id: 10006,\n          customer: \"Einstein\",\n          date: \"2019-2-01\",\n          amt: 120,  \n       },\n\n      ] \n    }\n  }\n\n  render(){ \n    return(\n        <div>\n          <Assignment history={this.state.transactions} monthsFilter={this.state.monthsToFilter}/>\n          <h1>Reward Point Accruals</h1>\n          <p className=\"sub-headline\">Built With Javascript Using React</p>\n          <History history={this.state.transactions} monthsFilter={this.state.monthsToFilter}/>\n          <RewardsByTrans history={this.state.transactions} monthsFilter={this.state.monthsToFilter}/>\n          <GrandTotal history={this.state.transactions} monthsFilter={this.state.monthsToFilter}/>\n          <MonthlyTotals history={this.state.transactions} monthsFilter={this.state.monthsToFilter}/>\n         \n        </div>\n  );    \n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}